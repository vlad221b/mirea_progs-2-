#1 Написать функцию, вычисляющую НОД двух чисел.
function GCD(a::T, b::T) where T
    while b != 0
        a, b = b, (a % b)
    end
    return a
end


#2 Написать функцию, реализующую расширенный алгоритм Евклида, вычисляющий не только НОД, но и коэффициенты его линейного представления.
function gcdx_(a::T,b::T)::Tuple{T,T,T} where T
        a,b = max(a,b),min(a,b) 
        u,v = 1,0
        u1,v1 = 0,1  # Здесь (u, v) будет представлять текущие коэффициенты Безу, а (u1, v1) - предыдущие коэффициенты Безу
    
        while b > 0
            k, r = divrem(a,b); 
            a,b = b, a - r #  r = k * b # Это шаг алгоритма Евклида для нахождения НОД.
            u,v = v,u - k * v
            u1,v1 = v1,u1 - k * v1
        end
    
        s = sign(a) 
    
        return (a * s, u * s, u1 * s) 
    end
    


#3 С использованием функции gcdx_ реализовать функцию invmod_(a::T, M::T) where T, которая бы возвращала бы обратное значение инвертируемого элемента (a) кольца вычетов по модулю M, а для необращаемых элементов возвращала бы nothing.

function invmod(a::T, M::T) where T
    gcd, x, y = gcdx_(a, M)
    if gcd != 1 # Если это условие выполняется, значит a и M не являются взаимно простыми числами, и обратного значения по модулю не существует.
        return ("Nothing")
    else
        return (x % M) # возврат обратного значения 
    end
end


#4 С использованием функции gcdx_ реализовать функцию diaphant_solve(a::T,b::T,c::T) where T, которая бы возвращала решение диафантового уравнения ax+by=c, если уравнение разрешимо, и значение nothing - в противном случае.

function diaphant_solve(a::Integer, b::Integer, c::Integer)
    gcd, x, y = gcdx_(a, b) 
    if c % gcd != 0 # остаток от деления c на gcd не равен нулю. Если это условие выполняется, значит диофантово уравнение не имеет целочисленных решений, так как c не делится на gcd без остатка
        return (0, 0) # решения отсутствуют
    else
        k = c / gcd 
        return (x * k, y * k) # решения диофантова уравнения, полученные путем умножения коэффициентов Безу на k.
    end
end